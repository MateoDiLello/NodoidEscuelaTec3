#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>   // incluye libreria para interfaz I2C
#include <RTClib.h>   // incluye libreria para el manejo del modulo RTC
RTC_DS3231 rtc;
#define RST_PIN	9    //Pin 9 para el reset del RC522
#define SS_PIN	10   //Pin 10 para el SS (SDA) del RC522
MFRC522 mfrc522(SS_PIN, RST_PIN); ///Creamos el objeto para el RC522

void setup() {
	Serial.begin(9600); //Iniciamos La comunicacion serial
	SPI.begin();        //Iniciamos el Bus SPI
	Serial.println("control de acceso:");
	mfrc522.PCD_Init(); // Iniciamos el MFRC522
  pinMode(3, OUTPUT);
  pinMode(2, OUTPUT);

Serial.begin(9600);    // inicializa comunicacion serie a 9600 bps

 if (! rtc.begin()) {       // si falla la inicializacion del modulo
 Serial.println("Modulo RTC no encontrado !");  // muestra mensaje de error
 while (1);         // bucle infinito que detiene ejecucion del programa
 }
 //rtc.adjust(DateTime(__DATE__, __TIME__));  // funcion que permite establecer fecha y horario
            // al momento de la compilacion. Comentar esta linea
}           // y volver a subir para normal operacion

byte ActualUID[4]; //almacenará el código del Tag leído
byte Usuario1[4]= {0x29, 0x86, 0xCA, 0x98} ; //código del usuario 1
byte Usuario2[4]= {0x01, 0x02, 0x03, 0x04} ; //código del usuario 2
void loop() {

  
  // Revisamos si hay nuevas tarjetas  presentes

  if ( mfrc522.PICC_IsNewCardPresent()) 
        {  
  		//Seleccionamos una tarjeta
            if ( mfrc522.PICC_ReadCardSerial()) 
            {
                  // Enviamos serialemente su UID
                  Serial.print(F("Card UID:"));
                  for (byte i = 0; i < mfrc522.uid.size; i++) {
                          Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
                          Serial.print(mfrc522.uid.uidByte[i], HEX);   
                          ActualUID[i]=mfrc522.uid.uidByte[i];          
                  } 
                  Serial.print("     ");                 
                  //comparamos los UID para determinar si es uno de nuestros usuarios  
                  DateTime fecha = rtc.now();      // funcion que devuelve fecha y horario en formato
            // DateTime y asigna a variable fecha
                  if(compareArray(ActualUID,Usuario1)){
                  
                    Serial.println("Acceso concedido");
                     mfrc522.PICC_HaltA();
                    digitalWrite(3, HIGH);
                    Serial.print(fecha.day());     // funcion que obtiene el dia de la fecha completa
                    Serial.print("/");  
                    Serial.print(fecha.month());     // funcion que obtiene el mes de la fecha completa
                    Serial.print("/");  
                    Serial.print(fecha.year());      // funcion que obtiene el año de la fecha completa
                    Serial.print(" ");       // caracter espacio en blanco como separador
// caracter barra como separador
                    Serial.print(fecha.hour());      // funcion que obtiene la hora de la fecha completa
                    Serial.print(":");       // caracter dos puntos como separador
                    Serial.print(fecha.minute());      // funcion que obtiene los minutos de la fecha completa
                    Serial.print(":");       // caracter dos puntos como separador
                    Serial.print(fecha.second());    // funcion que obtiene los segundos de la fecha completa
                    Serial.println("");
                    delay(2500);
                    digitalWrite(3,LOW);
                      // Terminamos la lectura de la tarjeta tarjeta  actual
          

                  }
                  else if(compareArray(ActualUID,Usuario2))
                    Serial.println("Acceso concedido"),
                    digitalWrite(3, HIGH),
                    delay(2500),
                    digitalWrite(3, LOW),
                    mfrc522.PICC_HaltA();
                 
                  else{
Serial.println("Acceso denegado"),
                    mfrc522.PICC_HaltA();
                    digitalWrite(2, HIGH);
                    Serial.print(fecha.day());     // funcion que obtiene el dia de la fecha completa
                    Serial.print("/");  
                    Serial.print(fecha.month());     // funcion que obtiene el mes de la fecha completa
                    Serial.print("/");  
                    Serial.print(fecha.year());      // funcion que obtiene el año de la fecha completa
                    Serial.print(" ");       // caracter espacio en blanco como separador
// caracter barra como separador
                    Serial.print(fecha.hour());      // funcion que obtiene la hora de la fecha completa
                    Serial.print(":");       // caracter dos puntos como separador
                    Serial.print(fecha.minute());      // funcion que obtiene los minutos de la fecha completa
                    Serial.print(":");       // caracter dos puntos como separador
                    Serial.print(fecha.second());    // funcion que obtiene los segundos de la fecha completa
                    Serial.println("");
                    delay(2500);
                    digitalWrite(2,LOW);
                      // Terminamos la lectura de la tarjeta tarjeta  actual
          
                  }
                    
                   
                    
            }
      
	}




}






//Función para comparar dos vectores
 boolean compareArray(byte array1[],byte array2[])
{
  if(array1[0] != array2[0])return(false);
  if(array1[1] != array2[1])return(false);
  if(array1[2] != array2[2])return(false);
  if(array1[3] != array2[3])return(false);
  return(true);
}

